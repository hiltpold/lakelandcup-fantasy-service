syntax = "proto3";

package fantasy;

option go_package = "./service/pb";

service FantasyService {
  rpc CreateLeague(LeagueRequest) returns (LeagueResponse) {}
  rpc GetLeagues(GetLeaguesRequest) returns (GetLeaguesResponse) {}
  rpc GetLeague(GetLeagueRequest) returns (GetLeagueResponse) {}
  rpc GetLeagueFranchisePairs(GetLeagueFranchisePairsRequest) returns (GetLeagueFranchisePairsResponse) {}
  rpc CreateFranchise(FranchiseRequest) returns (FranchiseResponse) {}
}

/*
    Lakelandcup
*/

message League {
	string ID = 1;
    string LeagueFounder = 2;
    string LeagueName = 3;
    string FoundationYear = 4;
    int32 MaxFranchises = 5;
    repeated Franchise Franchises = 6;
}

message Franchise {
	string ID = 1;
    string FranchisOwner = 2;
    string FranchiseName = 3;
    string FoundationYear = 4;
    string LeagueID = 5;
}


// Query Response

message QueryResponse {
    int64 status = 1;
    string error = 2;
    string result  = 3;
}
  
// League

message LeagueRequest {
  string userId = 1;
  string leagueName = 2;
  string foundationYear = 3;
  int32 maxFranchises = 4;
}

message LeagueResponse {
  int64 status = 1;
  string error = 2;
  string leagueId = 3;
}

message GetLeaguesRequest{
}

message GetLeaguesResponse {
  int64 status = 1;
  string error = 2;
  repeated League result = 3;
}


message GetLeagueRequest{
    string leagueId = 1;
}

message GetLeagueResponse {
  int64 status = 1;
  string error = 2;
  League result = 3;
}

message GetLeagueFranchisePairsRequest {
    string userId = 2;
}

message LeagueFranchisePair {
    string LeagueID = 1;
    string FranchiseID = 2;
}

message GetLeagueFranchisePairsResponse {
    int64 status = 1;
    string error = 2;
    repeated LeagueFranchisePair result  = 3;
}

// Franchise

message FranchiseRequest {
  string leagueId = 1;
  string franchiseOwner = 2;
  string franchiseName = 3;
  string foundationYear = 4;
}

message FranchiseResponse {
  int64 status = 1;
  string error = 2;
  string franchiseId = 3;
}

// Prospects
